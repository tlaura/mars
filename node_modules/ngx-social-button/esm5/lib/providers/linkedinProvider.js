/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import {SocialUser, LoginProviderClass} from '../entities/user';
import {BaseLoginProviderImpl} from '../entities/baseLoginProviderImpl';

var LinkedinLoginProvider = /** @class */ (function (_super) {
    tslib_1.__extends(LinkedinLoginProvider, _super);

    function LinkedinLoginProvider(clientId) {
        var _this = _super.call(this) || this;
        _this.clientId = clientId;
        _this.loginProviderObj = new LoginProviderClass();
        _this.TYPE = 'linkedin';
        _this.loginProviderObj.id = clientId;
        _this.loginProviderObj.name = 'linkedin';
        _this.loginProviderObj.url = 'https://platform.linkedin.com/in.js';
        return _this;
    }

    /**
     * @return {?}
     */
    LinkedinLoginProvider.prototype.initialize = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.loadScript(_this.loginProviderObj, function () {
                IN.init({
                    api_key: _this.clientId,
                    authorize: true,
                    onLoad: _this.onLinkedInLoad()
                });
                IN.Event.on(IN, 'auth', function () {
                    if (IN.User.isAuthorized()) {
                        IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result(function (res) {
                            resolve(_this.drawUser(res));
                        });
                    }
                });
            });
        });
    };
    /**
     * @return {?}
     */
    LinkedinLoginProvider.prototype.onLinkedInLoad = /**
     * @return {?}
     */
    function () {
        IN.Event.on(IN, 'systemReady', function () {
            IN.User.refresh();
        });
    };
    /**
     * @param {?} response
     * @return {?}
     */
    LinkedinLoginProvider.prototype.drawUser = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        /** @type {?} */
        var user = new SocialUser();
        user.id = response.id;
        user.name = response.firstName + ' ' + response.lastName;
        user.email = response.emailAddress;
        user.image = response.pictureUrl;
        user.accessToken = IN.ENV.auth.oauth_token;
        return user;
    };
    /**
     * @return {?}
     */
    LinkedinLoginProvider.prototype.signIn = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            IN.User.authorize(function () {
                IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result(function (res) {
                    console.log('linkedin', res);
                    resolve(_this.drawUser(res));
                });
            });
        });
    };
    /**
     * @return {?}
     */
    LinkedinLoginProvider.prototype.signOut = /**
     * @return {?}
     */
    function () {
        return new Promise(function (resolve, reject) {
            IN.User.logout(function (response) {
                resolve();
            }, function (err) {
                reject(err);
            });
        });
    };
    /**
     * @param {?=} share
     * @return {?}
     */
    LinkedinLoginProvider.prototype.sharing = /**
     * @param {?=} share
     * @return {?}
     */
    function (share) {
        return new Promise(function (resolve, reject) {
            /** @type {?} */
            var payload = {
                'comment': share ? share.comment : '',
                'visibility': {
                    'code': 'anyone'
                }
            };
            IN.API.Raw('/people/~/shares?format=json')
                .method('POST')
                .body(JSON.stringify(payload))
                .result(function (data) {
                    console.log('linkedin share', data);
                    resolve();
                })
                .error(function (onError) {
                    console.log('linkedin', onError);
                });
        });
    };
    LinkedinLoginProvider.PROVIDER_TYPE = 'linkedin';
    return LinkedinLoginProvider;
}(BaseLoginProviderImpl));
export {LinkedinLoginProvider};
if (false) {
    /** @type {?} */
    LinkedinLoginProvider.PROVIDER_TYPE;
    /** @type {?} */
    LinkedinLoginProvider.prototype.loginProviderObj;
    /** @type {?} */
    LinkedinLoginProvider.prototype.TYPE;
    /** @type {?} */
    LinkedinLoginProvider.prototype.clientId;
}

//# sourceMappingURL=data:application/json;base64,