/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import {SocialUser, LoginProviderClass} from '../entities/user';
import {BaseLoginProviderImpl} from '../entities/baseLoginProviderImpl';

export class LinkedinLoginProvider extends BaseLoginProviderImpl {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.loginProviderObj = new LoginProviderClass();
        this.TYPE = 'linkedin';
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'linkedin';
        this.loginProviderObj.url = 'https://platform.linkedin.com/in.js';
    }

    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) = > {
            this.loadScript(this.loginProviderObj, () = > {
                IN.init({
                    api_key: this.clientId,
                    authorize: true,
                    onLoad: this.onLinkedInLoad()
                });
        IN.Event.on(IN, 'auth', () = > {
            if(IN.User.isAuthorized();
    )
        {
            IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) = > {
                resolve(this.drawUser(res);
        )
        })
        }
    })
    })
    })
    }

    /**
     * @return {?}
     */
    onLinkedInLoad() {
        IN.Event.on(IN, 'systemReady', () = > {
            IN.User.refresh();
    })
    }

    /**
     * @param {?} response
     * @return {?}
     */
    drawUser(response) {
        /** @type {?} */
        const user = new SocialUser();
        user.id = response.id;
        user.name = response.firstName + ' ' + response.lastName;
        user.email = response.emailAddress;
        user.image = response.pictureUrl;
        user.accessToken = IN.ENV.auth.oauth_token;
        return user;
    }

    /**
     * @return {?}
     */
    signIn() {
        return new Promise((resolve, reject) = > {
            IN.User.authorize(() = > {
                IN.API.Raw('/people/~:(id,first-name,last-name,email-address,picture-url)').result((res) = > {
                    console.log('linkedin', res);
        resolve(this.drawUser(res));
    })
    })
    })
    }

    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) = > {
            IN.User.logout((response) = > {
                resolve();
    },
        (err) =;
    >
        {
            reject(err);
        }
    )
    })
    }

    /**
     * @param {?=} share
     * @return {?}
     */
    sharing(share) {
        return new Promise((resolve, reject) = > {
            /** @type {?} */
            const payload = {
                'comment': share ? share.comment : '',
                'visibility': {
                    'code': 'anyone'
                }
            };
        IN.API.Raw('/people/~/shares?format=json')
            .method('POST')
            .body(JSON.stringify(payload))
            .result(data = > {
            console.log('linkedin share', data);
        resolve();
    })
    .
        error(onError = > {
            console.log('linkedin', onError);
    })
    })
    }
}

LinkedinLoginProvider.PROVIDER_TYPE = 'linkedin';
if (false) {
    /** @type {?} */
    LinkedinLoginProvider.PROVIDER_TYPE;
    /** @type {?} */
    LinkedinLoginProvider.prototype.loginProviderObj;
    /** @type {?} */
    LinkedinLoginProvider.prototype.TYPE;
    /** @type {?} */
    LinkedinLoginProvider.prototype.clientId;
}

//# sourceMappingURL=data:application/json;base64,