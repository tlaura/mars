/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import {BaseLoginProviderImpl} from '../entities/baseLoginProviderImpl';
import {SocialUser, LoginProviderClass} from '../entities/user';

export class FacebookLoginProvider extends BaseLoginProviderImpl {
    /**
     * @param {?} clientId
     */
    constructor(clientId) {
        super();
        this.clientId = clientId;
        this.TYPE = 'facebook';
        this.loginProviderObj = new LoginProviderClass();
        this.loginProviderObj.id = clientId;
        this.loginProviderObj.name = 'facebook';
        this.loginProviderObj.url = 'https://connect.facebook.net/en_US/sdk.js';
    }

    /**
     * @return {?}
     */
    initialize() {
        return new Promise((resolve, reject) = > {
            this.loadScript(this.loginProviderObj, () = > {
                FB.init({
                    appId: this.clientId,
                    autoLogAppEvents: true,
                    cookie: true,
                    xfbml: true,
                    version: 'v2.8'
                });
        FB.AppEvents.logPageView();
        FB.getLoginStatus(function (response) {
            if (response.status === 'connected') {
                /** @type {?} */
                const accessToken = FB.getAuthResponse()['accessToken'];
                FB.api('/me?fields=name,email,picture', (res) = > {
                    resolve(FacebookLoginProvider.drawUser(Object.assign({}, {token: accessToken}, res));
            )
            })
            }
        });
    })
    })
    }

    /**
     * @param {?} response
     * @return {?}
     */
    static drawUser(response) {
        /** @type {?} */
        let user = new SocialUser();
        user.id = response.id;
        user.name = response.name;
        user.email = response.email;
        user.accessToken = response.accessToken;
        user.image = 'https://graph.facebook.com/' + response.id + '/picture?type=normal';
        return user;
    }

    /**
     * @param {?=} scopes
     * @return {?}
     */
    signIn(scopes) {
        return new Promise((resolve, reject) = > {
            FB.login((response) = > {
                console.log("facebook", response);
        if (response.authResponse) {
            /** @type {?} */
            const accessToken = FB.getAuthResponse()['accessToken'];
            FB.api('/me?fields=name,email,picture', (res) = > {
                console.log("me", res);
            resolve(FacebookLoginProvider.drawUser(Object.assign({}, {accessToken: accessToken}, res)));
        })
        }
    },
        {
            scopes && scopes.length > 0 ? scopes.join(',') : 'email,public_profile'
        }
    )
    })
    }

    /**
     * @param {?=} share
     * @return {?}
     */
    sharing(share) {
        return new Promise((resolve, reject) = > {
            FB.ui({
                method: 'share',
                href: share.href,
                hashtag: (share.hashtag && share.hashtag.indexOf('#') >= 0) ? share.hashtag : null
            }, function (response) {
                console.log(response);
                resolve();
            });
    })
    }

    /**
     * @return {?}
     */
    signOut() {
        return new Promise((resolve, reject) = > {
            FB.logout((response) = > {
                resolve();
    })
    })
    }
}

FacebookLoginProvider.PROVIDER_TYPE = 'facebook';
FacebookLoginProvider.SCOPES = {
    EMAIL: 'email',
    PUBLIC_PROFILE: 'public_profile'
};
if (false) {
    /** @type {?} */
    FacebookLoginProvider.PROVIDER_TYPE;
    /** @type {?} */
    FacebookLoginProvider.SCOPES;
    /** @type {?} */
    FacebookLoginProvider.prototype.TYPE;
    /** @type {?} */
    FacebookLoginProvider.prototype.loginProviderObj;
    /** @type {?} */
    FacebookLoginProvider.prototype.clientId;
}

//# sourceMappingURL=data:application/json;base64,